user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name reactchat.online www.reactchat.online;

        # HTTP 요청을 HTTPS로 리다이렉트
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name reactchat.online www.reactchat.online;

        # SSL 인증서 경로 설정
        ssl_certificate /etc/letsencrypt/live/reactchat.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/reactchat.online/privkey.pem;

        # SSL 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

        # React 애플리케이션을 서빙하는 위치 설정
        root /usr/share/nginx/html;
        index index.html;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # Let's Encrypt 인증을 위한 경로 설정
        location ^~ /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
            allow all;
        }

        # HTTP 헤더 설정 (옵션)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' https: data: blob: 'unsafe-inline' 'unsafe-eval';" always;

        # 보안 강화를 위한 HTTP 헤더 추가 가능

        # HTTP -> HTTPS 리다이렉션 설정 (옵션)
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }
    }
}
